@page "/Prestamo/Edit/{PrestamoId:int}"

@inject PrestamosService prestamosService
@inject DeudoresService deudoresService
@inject ToastService toastService
@inject NavigationManager navigationManager

@*HTML*@
<PageTitle>Modificar</PageTitle>
<EditForm Model="Prestamo" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <label style="color:red;" hidden="@string.IsNullOrEmpty(ErrorNombre)">@ErrorNombre</label>
    <label style="color:green;" hidden="@string.IsNullOrEmpty(GuardarExito)">@GuardarExito</label>
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Prestamo</h5>
            </div>

            <div class="card-body">
                @*Deudor*@
                <div class="mb-3">
                    <label class="form-label"><strong>Deudor</strong></label>
                    <InputSelect class="form-control" @bind-Value="Prestamo.DeudorId">
                        <option value="" selected disabled>Elija una opci&oacute;n</option>
                        @foreach (var deudor in ListaDeudores)
                        {
                            <option value="@deudor.DeudorId">@deudor.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="(() => Prestamo.Deudor)" />
                </div>
                @*Concepto*@
                <div class="mb-3">
                    <label class="form-label"><strong>Concepto</strong></label>
                    <InputText class="form-control" @bind-Value="Prestamo.Concepto"></InputText>
                    <ValidationMessage For="(() => Prestamo.Concepto)" />
                </div>
                @*Monto*@
                <div class="mb-3">
                    <label class="form-label"><strong>Monto</strong></label>
                    <InputNumber class="form-control" @bind-Value="Prestamo.Monto"></InputNumber>
                    <ValidationMessage For="(() => Prestamo.Monto)" />
                </div>

                <CuotaPicker Valor="Prestamo.Monto" CuotasIniciales="ListaPrestamosDetalles" OnCuotasCalculated="HandleCuotasCalculated" />

            </div>

            @*footer*@
            <div class="card-footer text-center mt-2">
                <a href="/Prestamo/Index" class="btn btn-secondary"> 
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Modificar</button>
                <button type="button" class="btn btn-danger bi bi-trash" @onclick="Eliminar"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrestamoId { get; set; }

    public Prestamos Prestamo { get; set; } = new Prestamos();
    public string Mensaje { get; set; } = string.Empty;
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();
    public List<PrestamosDetalle> ListaPrestamosDetalles { get; set; } = new List<PrestamosDetalle>();
    private string ErrorNombre { get; set; } = string.Empty;
    private string GuardarExito { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Prestamo = await prestamosService.Buscar(PrestamoId);
        if (Prestamo != null)
        {
            ListaPrestamosDetalles = Prestamo.PrestamosDetalle?.ToList() ?? new List<PrestamosDetalle>();
        }
        ListaDeudores = await deudoresService.Listar(d => d.DeudorId > 0);

    }

    public async Task Modificar()
    {
        Prestamo.PrestamosDetalle = ListaPrestamosDetalles.ToList();

        var creado = await prestamosService.Guardar(Prestamo);

        if (creado)
        {
            navigationManager.NavigateTo("/Prestamo/Index");
        }
        
    }

    private async Task Eliminar(){
        var eliminado = await prestamosService.Eliminar(Prestamo.PrestamoId);

        if (eliminado)
        {
            GuardarExito = "Se ha eliminado correctamente";
            navigationManager.NavigateTo("/Prestamo/Index");
        }
        else
        {
            ErrorNombre = "No se ha podido eliminar correctamente";
        }
    }
    private async Task HandleCuotasCalculated(List<PrestamosDetalle> detalles)
    {
        if (detalles == null || detalles.Count == 0)
            return;

        ListaPrestamosDetalles.Clear();
        Prestamo.PrestamosDetalle.Clear();
        ListaPrestamosDetalles.AddRange(detalles);
        Prestamo.PrestamosDetalle = ListaPrestamosDetalles.ToList();
        StateHasChanged();

        await Task.CompletedTask;
    }
}